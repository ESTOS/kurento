/* Autogenerated with kurento-module-creator */

#include <gst/gst.h>
#include "MediaPipeline.hpp"
#include <ArMarkerdetectorImplFactory.hpp>
#include "ArMarkerdetectorImpl.hpp"
#include <jsonrpc/JsonSerializer.hpp>
#include <KurentoException.hpp>
#include "MediaPipelineImpl.hpp"

#define GST_CAT_DEFAULT kurento_ar_markerdetector_impl
GST_DEBUG_CATEGORY_STATIC (GST_CAT_DEFAULT);
#define GST_DEFAULT_NAME "KurentoArMarkerdetectorImpl"

namespace kurento
{
namespace module
{
namespace armarkerdetector
{

ArMarkerdetectorImpl::ArMarkerdetectorImpl (const boost::property_tree::ptree &config, std::shared_ptr<MediaPipeline> mediaPipeline) : OpenCVFilterImpl (config, std::dynamic_pointer_cast<MediaPipelineImpl> (mediaPipeline) )

{
}

MediaObjectImpl *
ArMarkerdetectorImplFactory::createObject (const boost::property_tree::ptree &config, std::shared_ptr<MediaPipeline> mediaPipeline) const
{
  return new ArMarkerdetectorImpl (config, mediaPipeline);
}

ArMarkerdetectorImpl::StaticConstructor ArMarkerdetectorImpl::staticConstructor;

ArMarkerdetectorImpl::StaticConstructor::StaticConstructor()
{
  GST_DEBUG_CATEGORY_INIT (GST_CAT_DEFAULT, GST_DEFAULT_NAME, 0,
                           GST_DEFAULT_NAME);
}

//virtual void Serialize (JsonSerializer &serializer);

int ArMarkerdetectorImpl::getShowDebugLevel () {
	return ArMarkerdetectorOpenCVImpl::getShowDebugLevel();
}

void ArMarkerdetectorImpl::setShowDebugLevel (int showDebugLevel) {
  	//throw KurentoException (NOT_IMPLEMENTED, "Not implemented");
	ArMarkerdetectorOpenCVImpl::setShowDebugLevel(showDebugLevel);
}

std::string ArMarkerdetectorImpl::getOverlayImage () {
	return ArMarkerdetectorOpenCVImpl::getOverlayImage();
}

void ArMarkerdetectorImpl::setOverlayImage (const std::string &overlayImage) {
	ArMarkerdetectorOpenCVImpl::setOverlayImage(overlayImage);
}

std::string ArMarkerdetectorImpl::getOverlayText () {
	return ArMarkerdetectorOpenCVImpl::getOverlayText();
}

void ArMarkerdetectorImpl::setOverlayText (const std::string &overlayText) {
	ArMarkerdetectorOpenCVImpl::setOverlayText(overlayText);
}

float ArMarkerdetectorImpl::getOverlayScale () {
	return ArMarkerdetectorOpenCVImpl::getOverlayScale();
}
void ArMarkerdetectorImpl::setOverlayScale (float overlayScale) {
	ArMarkerdetectorOpenCVImpl::setOverlayScale(overlayScale);
}

} /* armarkerdetector */
} /* module */
} /* kurento */
