/* Autogenerated with kurento-module-creator */

#include "ArMarkerdetectorOpenCVImpl.hpp"
#include <KurentoException.hpp>

namespace kurento
{
namespace module
{
namespace armarkerdetector
{

ArMarkerdetectorOpenCVImpl::ArMarkerdetectorOpenCVImpl ()
 : mShowDebugLevel(0)
 , mOverlayScale(0.f)
{
  pthread_mutex_init(&mMutex, NULL);
}

ArMarkerdetectorOpenCVImpl::~ArMarkerdetectorOpenCVImpl () {
  pthread_mutex_destroy(&mMutex);
}

/*
 * This function will be called with each new frame. mat variable
 * contains the current frame. You should insert your image processing code
 * here. Any changes in mat, will be sent through the Media Pipeline.
 */
void ArMarkerdetectorOpenCVImpl::process (cv::Mat &mat)
{
  pthread_mutex_lock(&mMutex);
  //cv::circle(mat, cv::Point(100,100), 50, CV_RGB(255,0,0));
  IplImage ipl = mat;
  ar.detect_marker(&ipl, mShowDebugLevel);
  std::map<int,int>::iterator iter;
  for (iter = ar.detectedMarkers.begin(); iter != ar.detectedMarkers.end(); iter++) {
    // TODO: Send Event with marker id "iter->first" if iter->second == 1 (maybe another event in case of iter->second == -1 ?)

    // Following is just for debug
    //cv::circle(mat, cv::Point(iter->second+mat.cols/2, 10+iter->first*10), 5, CV_RGB(255,0,0));
  }
  pthread_mutex_unlock(&mMutex);
}

int ArMarkerdetectorOpenCVImpl::getShowDebugLevel () {
  return mShowDebugLevel;
}

void ArMarkerdetectorOpenCVImpl::setShowDebugLevel (int showDebugLevel) {
  pthread_mutex_lock(&mMutex);
  mShowDebugLevel = showDebugLevel;
  pthread_mutex_unlock(&mMutex);
}

std::string ArMarkerdetectorOpenCVImpl::getOverlayImage () {
  return mOverlayImage;
}

void ArMarkerdetectorOpenCVImpl::setOverlayImage (const std::string &overlayImage) {
  pthread_mutex_lock(&mMutex);
  mOverlayImage = overlayImage;
  ar.set_overlay(mOverlayImage.c_str(), mOverlayText.c_str());
  pthread_mutex_unlock(&mMutex);
}

std::string ArMarkerdetectorOpenCVImpl::getOverlayText () {
  return mOverlayText;
}

void ArMarkerdetectorOpenCVImpl::setOverlayText (const std::string &overlayText) {
  mOverlayText = overlayText;
  pthread_mutex_lock(&mMutex);
  ar.set_overlay(mOverlayImage.c_str(), mOverlayText.c_str());
  pthread_mutex_unlock(&mMutex);
}

float ArMarkerdetectorOpenCVImpl::getOverlayScale () {
  return mOverlayScale;
}
void ArMarkerdetectorOpenCVImpl::setOverlayScale (float overlayScale) {
  pthread_mutex_lock(&mMutex);
  mOverlayScale = overlayScale;
  ar.set_overlay_scale(mOverlayScale);
  pthread_mutex_unlock(&mMutex);
}



} /* armarkerdetector */
} /* module */
} /* kurento */
