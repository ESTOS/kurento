/* Autogenerated with kurento-module-creator */

#include "ArMarkerdetectorOpenCVImpl.hpp"
#include <KurentoException.hpp>

namespace kurento
{
namespace module
{
namespace armarkerdetector
{

ArMarkerdetectorOpenCVImpl::ArMarkerdetectorOpenCVImpl ()
{
}

/*
 * This function will be called with each new frame. mat variable
 * contains the current frame. You should insert your image processing code
 * here. Any changes in mat, will be sent through the Media Pipeline.
 */
void ArMarkerdetectorOpenCVImpl::process (cv::Mat &mat)
{
  IplImage ipl = mat;
  ar.detect_marker(&ipl);
  std::map<int,int>::iterator iter;
  for (iter = ar.detectedMarkers.begin(); iter != ar.detectedMarkers.end(); iter++) {
    // TODO: Send Event with marker id "iter->first" if iter->second == 1 (maybe another event in case of iter->second == -1 ?)
    if (iter->second == 1) {
      try {
        std::cout<<"SEND EVENT for marker: "<<iter->first<<std::endl;
        markerEvent event(iter->first, 1,
                                    getSharedFromThis(),
                                    markerEvent::getName() );
        signalmarkerEvent(event);
      } catch (std::bad_weak_ptr &e) {}
    }

    // Following is just for debug
    //cv::circle(mat, cv::Point(iter->second+mat.cols/2, 10+iter->first*10), 5, CV_RGB(255,0,0));
  }
}

void ArMarkerdetectorOpenCVImpl::setShowDebugLevel (int showDebugLevel)
{
  ar.setShowDebugLevel(showDebugLevel);
}

int ArMarkerdetectorOpenCVImpl::getShowDebugLevel ()
{
  return ar.getShowDebugLevel();
}

void ArMarkerdetectorOpenCVImpl::setOverlayImage (const std::string &overlayImage)
{
  ar.set_overlay(overlayImage.c_str(), NULL);
}

std::string ArMarkerdetectorOpenCVImpl::getOverlayImage ()
{
  return ar.get_overlay_image();
}

void ArMarkerdetectorOpenCVImpl::setOverlayText (const std::string &overlayText)
{
  ar.set_overlay(NULL, overlayText.c_str());
}

std::string ArMarkerdetectorOpenCVImpl::getOverlayText ()
{
  return ar.get_overlay_text();
}

void ArMarkerdetectorOpenCVImpl::setOverlayScale (float overlayScale)
{
  ar.set_overlay_scale(overlayScale);
}

float ArMarkerdetectorOpenCVImpl::getOverlayScale ()
{
  return ar.get_overlay_scale();
}

} /* armarkerdetector */
} /* module */
} /* kurento */
