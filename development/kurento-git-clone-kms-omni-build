#!/usr/bin/env bash

# Clone all sub-repos forming part of kms-omni-build, in their 'master' branch.
# This provides independent repositories, instead of using Git submodules.



# Shell setup
BASEPATH="$(cd -P -- "$(dirname -- "$0")" && pwd -P)"  # Absolute canonical path
# shellcheck source=bash.conf.sh
source "$BASEPATH/../bash.conf.sh" || {
    # Bash options for strict error checking
    set -o errexit -o errtrace -o pipefail -o nounset
}



# Settings
# BASE_URL="https://github.com/Kurento"  # Use HTTPS (Username + Password)
BASE_URL="git@github.com:Kurento"  # Use SSH (Public/Private SSH Keys)

BASE_REPO="kms-omni-build"

REPO_NAMES=(
    kurento-module-creator
    kms-cmake-utils
    kms-jsonrpc
    kms-core
    kms-elements
    kms-filters
    kurento-media-server
)



# Start
log "==== Clone kms-omni-build repositories ===="
log "This script will clone these repos:"
printf 'kms-omni-build/%s\n' "${REPO_NAMES[@]}"
read -p "Are you sure? Type 'yes': " -r SURE
[ "$SURE" != "yes" ] && [ "$SURE" != "YES" ] && { log "Aborting"; exit 1; }

log "Working..."

function clone_kurento() {
    local REPO_NAME="$1"
    local REPO_PATH="$PWD/$REPO_NAME"
    if [[ -e "$REPO_PATH/.git" ]]; then
        log "Skip already existing: $REPO_PATH"
    else
        local REPO_URL="$BASE_URL/$REPO_NAME.git"
        log "Clone repository: $REPO_NAME"
        git clone --quiet "$REPO_URL" "$REPO_NAME"
    fi
}

# Clone the parent repo
clone_kurento "$BASE_REPO"
cd "$PWD/$BASE_REPO"

# Clone all subrepos
for REPO_NAME in "${REPO_NAMES[@]}"; do
    clone_kurento "$REPO_NAME"

    # Init any submodules of the subrepo
    pushd "$REPO_NAME" >/dev/null
    git submodule update --quiet --init --recursive
    popd >/dev/null # $REPO_NAME
done

log "Repositories cloned at $PWD/$BASE_REPO/"



# ------------

log "Done."
